---
- hosts: network
  vars:
    username: cisco
    password: cisco123!
  tasks:
    - name: Configure hostname
      ansible.builtin.uri:
        url: "https://{{ item.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/hostname"
        method: PATCH
        body_format: json
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        validate_certs: no
        headers: 
          Content-Type: application/yang-data+json
        body: 
          hostname: "{{ item.name }}"
      register: hostname_response
      failed_when: hostname_response.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms'] }}"

    - name: Check user presence
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/username={{ item.1.username }}"
        method: GET
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Accept: application/yang-data+json
      register: user_presence_response
      failed_when: user_presence_response.status not in [200,404]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('users', skip_missing=True) }}"

#    - debug:
#        var: user_presence_response

    - name: Create user
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native"
        method: POST
        body_format: json
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          username:
            - name: "{{ item.1.username }}"
              privilege: "{{ item.1.privilege }}"
              secret:
                encryption: "0"
                secret: "{{ item.1.password }}"
      register: user_response
      when: user_presence_response.results[0].status == 404
      failed_when: user_response.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('users', skip_missing=True) }}"

    - name: Configure management interface
      ansible.builtin.uri:
        url: "https://{{ item.vbox_ip }}/restconf/data/ietf-interfaces:interfaces"
        method: PATCH
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ietf-interfaces:interfaces:
            interface:
              name: GigabitEthernet1
              enabled: true
              ietf-ip:ipv4:
                address:
                  - ip: "{{ item.vbox_ip }}"
                    netmask: 255.255.255.0
      register: management_interface_response
      failed_when: management_interface_response.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms'] }}"

    - name: Configure SDN interface
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/ietf-interfaces:interfaces"
        method: PATCH
        body_format: json
        user: "{{ item.0.users.0.username | default(username) }}"
        password: "{{ item.0.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ietf-interfaces:interfaces:
            interface:
              name: "{{ item.1.name }}"
              enabled: true
              ietf-ip:ipv4:
                address:
                  - ip: "{{ item.1.ip }}"
                    netmask: "{{ item.1.subnet }}"
      register: sdn_interface_response
      failed_when: sdn_interface_response.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms'] | subelements('configuration') }}"

    - name: Configure routes only interface
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitInterface }}"
      register: route_response_onlyint
      failed_when: route_response_onlyint.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is defined and item.1.exitGateway is undefined and item.1.metric is undefined)

    - name: Configure routes interface and metric
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitInterface }}"
                  interface-next-hop:
                    - metric: "{{ item.1.metric }}"
      register: route_response_intmetric
      failed_when: route_response_intmetric.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is defined and item.1.exitGateway is undefined and item.1.metric is defined)

    - name: Configure routes only gateway
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitGateway }}"
      register: route_response_onlygw
      failed_when: route_response_onlygw.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is undefined and item.1.exitGateway is defined and item.1.metric is undefined)

    - name: Configure routes gateway metric
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitGateway }}"
                  interface-next-hop:
                    - metric: "{{ item.1.metric }}"
      register: route_response_gwmetric
      failed_when: route_response_gwmetric.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is undefined and item.1.exitGateway is defined and item.1.metric is defined)

    - name: Configure routes both no metric
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitInterface }}"
                  interface-next-hop:
                    - ip-address: "{{ item.1.exitGateway }}"
      register: route_response_bothnometric
      failed_when: route_response_bothnometric.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is defined and item.1.exitGateway is defined and item.1.metric is undefined)

    - name: Configure routes both with metric
      ansible.builtin.uri:
        url: "https://{{ item.0.vbox_ip }}/restconf/data/Cisco-IOS-XE-native:native/ip/route"
        method: POST
        body_format: json
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
        headers:
          Content-Type: application/yang-data+json
        body:
          ip-route-interface-forwarding-list:
            - prefix: "{{ item.1.prefix }}"
              mask: "{{ item.1.mask }}"
              fwd-list:
                - fwd: "{{ item.1.exitInterface }}"
                  interface-next-hop:
                    - ip-address: "{{ item.1.exitGateway }}"
                      metric: "{{ item.1.metric }}"
      register: route_response_bothmetric
      failed_when: route_response_bothmetric.status not in [200,201,204]
      loop: "{{ hostvars[inventory_hostname]['vms']|subelements('routes', skip_missing=True) }}"
      when: (item.1.exitInterface is defined and item.1.exitGateway is defined and item.1.metric is defined)

    - name: Save config
      ansible.builtin.uri:
        url: "https://{{ item.vbox_ip }}/restconf/operations/cisco-ia:save-config"
        method: POST
        user: "{{ item.users.0.username | default(username) }}"
        password: "{{ item.users.0.password | default(password) }}"
        force_basic_auth: true
        validate_certs: no
      loop: "{{ hostvars[inventory_hostname]['vms'] }}"
...
